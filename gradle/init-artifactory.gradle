/**
 Do not make changes to this file directly in Jenkins, just push changes to
 github. The Seed job will always update the file on Jenkins based on the current
 version of this file in the rep.
 */
initscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
    }

    // Add moderne plugin to classpath of this init script.
    dependencies {
        classpath("io.moderne:moderne-gradle-plugin:latest.release")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:latest.release")
    }
}

addListener(new BuildInfoPluginListener())

// Enable build cache, only available for Gradle 3.5+, so invoked defensively
startParameter.metaClass.getMetaProperty("buildCacheEnabled")?.setProperty(startParameter, true)

settingsEvaluated { settings ->
    settings.pluginManagement {
        repositories {
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2" }
        }
    }
}

allprojects {
    def unwantedTasks = ['javadoc', 'findbugs', 'sonarqube']

    project.tasks.all { task ->
        if (unwantedTasks.contains(task.name) || task.name.startsWith('checkstyle')) {
            task.enabled = false
        }
    }
    if (!"buildSrc".equals(project.name)) {
        project.publishing {
                publications {
                    removeAll()
                    create("moderne", MavenPublication.class) {
                        artifacts = [tasks.getByName("moderneJar")]
                    }
                }
        }
        project.artifactory {
            publish {
                contextUrl = System.getenv('ARTIFACTORY_URL') ?: "https://artifactory.moderne.ninja/artifactory"
                repository {
                    repoKey = System.getenv('ARTIFACTORY_REPO_KEY') ?: 'moderne-maven-repo'
                    username = System.getenv("ARTIFACTORY_USER")
                    password = System.getenv("ARTIFACTORY_PASSWORD")
                }
                defaults {
                    publications('moderne')
                    properties = ['moderne_parsed': 'true']
                    publishArtifacts = false
                    publishBuildInfo = false
                    publishPom = false
                }
                setIncludePatterns("*-ast.jar")
                setFilterExcludedArtifactsFromBuild(true)
            }
            clientConfig.publisher.setIncludePatterns("*-ast.jar")
            clientConfig.publisher.setFilterExcludedArtifactsFromBuild(true)
        }
    }

    project.afterEvaluate {
        if (!project.plugins.hasPlugin(io.moderne.gradle.ModernePlugin)) {
            project.plugins.apply(io.moderne.gradle.ModernePlugin)
        }
        if (project.group == null || !project.group?.trim()) {
            // For publishing to succeed a groupId must be set
            project.group = "io.moderne.unknown"
        }
        // Plugin must be able to resolve its dependencies
        project.repositories {
            mavenCentral()
        }
    }
}

class BuildInfoPluginListener extends BuildAdapter {

    def void projectsLoaded(Gradle gradle) {
        Project root = gradle.getRootProject()
        if (!"buildSrc".equals(root.name)) {
            root.allprojects {
                apply {
                    apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin
                    apply plugin: 'maven-publish'
                    apply plugin: io.moderne.gradle.ModernePlugin

                }
            }
        }
        //This enables the artifactory task to pickup publications.
        for (Project p : root.getAllprojects()) {
            Task t = p.getTasks().findByName(org.jfrog.gradle.plugin.artifactory.task.ArtifactoryTask.ARTIFACTORY_PUBLISH_TASK_NAME)
            if (t != null) {
                org.jfrog.gradle.plugin.artifactory.task.ArtifactoryTask task = (org.jfrog.gradle.plugin.artifactory.task.ArtifactoryTask) t
                task.setCiServerBuild()
            }
        }
    }
}
